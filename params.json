{"name":"Argo","tagline":"Argo is a modular HTTP gateway for Web APIs.","body":"# Argo\r\n\r\nAn extensible, asynchronous HTTP reverse proxy and origin server.\r\n\r\n<!-- Argo is:\r\n\r\n* An API-focused HTTP server.\r\n* A reverse proxy to manage and modify HTTP requests and responses.\r\n* Modular using handlers for request and response pipelines.\r\n* Extensible using a package system.\r\n\r\nAs an API server:\r\n\r\n* Route requests to handlers.\r\n* Separate resources into modules.\r\n\r\nAs a reverse proxy:\r\n\r\n* Route requests to backend servers.\r\n* Transform HTTP messages on the fly.\r\n* Add OAuth 2.0 support to an existing API.\r\n* Create a RESTful API faÃ§ade over legacy systems.\r\n-->\r\n\r\n## Examples\r\n\r\n### Adding Cross-Origin Resource Sharing\r\n\r\nSetup the server:\r\n\r\n```javascript\r\nvar argo = require('argo');\r\n\r\nargo()\r\n  .use(function(handle) {\r\n    handle('response', function(env, next) {\r\n      env.response.setHeader('Access-Control-Allow-Origin', '*');\r\n      next(env);\r\n    });\r\n  })\r\n  .target('http://weather.yahooapis.com')\r\n  .listen(1337);\r\n```\r\n\r\nMake a request:\r\n\r\n```bash\r\n$ curl -i http://localhost:1337/forecastrss?w=2467861\r\n\r\nHTTP/1.1 200 OK\r\nDate: Thu, 28 Feb 2013 20:55:03 GMT\r\nContent-Type: text/xml;charset=UTF-8\r\nConnection: keep-alive\r\nServer: YTS/1.20.13\r\nAccess-Control-Allow-Origin: *\r\nContent-Length: 2337\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\r\n<GiantXMLResponse/>\r\n```\r\n\r\n### Serving an API Response \r\n\r\nSetup the server: \r\n\r\n```javascript\r\nvar argo = require('argo');\r\n\r\nargo()\r\n  .get('/dogs', function(handle) {\r\n    handle('request', function(env, next) {\r\n      env.response.statusCode = 200;\r\n      env.response.body = { dogs: ['Alfred', 'Rover', 'Dino'] };\r\n      next(env);\r\n    });\r\n  })\r\n  .listen(1337);\r\n```\r\n\r\nMake a request:\r\n\r\n```bash\r\n$ curl -i http://localhost:1337/dogs\r\n\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json\r\nContent-Length: 34 \r\nDate: Thu, 28 Feb 2013 20:44:46 GMT\r\nConnection: keep-alive\r\n\r\n{\"dogs\":[\"Alfred\",\"Rover\",\"Dino\"]}\r\n```\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install argo\r\n```\r\n\r\n## Documentation\r\n\r\n* [handleFunction](#handleFunction)\r\n* [use(handleFunction)](#usehandle)\r\n* [use(package)](#usepackage)\r\n* [target](#target)\r\n* [route](#route)\r\n* [get](#get)\r\n* [post](#post)\r\n* [put](#put)\r\n* [del](#del)\r\n* [options](#options)\r\n* [trace](#trace)\r\n* [map](#map)\r\n* [include](#include)\r\n* [listen](#listen)\r\n\r\n\r\n## Usage\r\n\r\n<a name=\"handleFunction\"/>\r\n### handleFunction(type, [options], callback)\r\n\r\n* `type`: `'request'` or `'response'`\r\n\r\n* `options`: Mostly used for internal purposes.  Optional.\r\n\r\n* `callback(env, next)`: A request or response callback. `env` is an environment context that is passed to every handler, and `next` is a reference to the next function in the pipeline.\r\n\r\nWhen the handler is complete and wishes to pass to the next function in the pipeline, it must call `next(env)`.\r\n\r\n<a name=\"usehandle\"/>\r\n### use(handleFunction)\r\n\r\n`handleFunction` is used to set up request and response handlers.  \r\n\r\n```javascript\r\nargo()\r\n  //For every request add 'X-Custom-Header' with value 'Yippee!'\r\n  .use(function(handle) {\r\n    handle('request', function(env, next) {\r\n      env.request.headers['X-Custom-Header'] = 'Yippee!';\r\n      next(env);\r\n    });\r\n  })\r\n```\r\n<a name=\"usepackage\"/>\r\n### use(package)\r\n\r\nAlias for `include(package)`.\r\n\r\n<a name=\"target\"/>\r\n### target(uri)\r\n\r\n`target` is used for proxying requests to a backend server.\r\n\r\n* `uri`: a string pointing to the target URI.\r\n\r\nExample:\r\n\r\n```javascript\r\nargo()\r\n  .target('http://weather.yahooapis.com')\r\n```\r\n<a name=\"route\"/>\r\n### route(path, [options], handleFunction)\r\n\r\n* `path`: a string used to match HTTP Request URI path.\r\n\r\n* `options`: an object with a `methods` property to filter HTTP methods (e.g., `{ methods: ['GET','POST'] }`).  Optional.\r\n\r\n* `handleFunction`: Same as in `use`.\r\n\r\nExample:\r\n\r\n```javascript\r\nargo()\r\n  .route('/greeting', function(handle) {\r\n    handle('request', function(env, next) {\r\n      env.response.statusCode = 200;\r\n      env.response.headers = { 'Content-Type': 'text/plain' };\r\n      env.response.body = 'Hello World!';\r\n \r\n      next(env);\r\n    });\r\n  })\r\n```\r\n<a name=\"get\"/>\r\n<a name=\"post\"/>\r\n<a name=\"put\"/>\r\n<a name=\"del\"/>\r\n<a name=\"options\"/>\r\n<a name=\"trace\"/>\r\n### get(path, handleFunction)\r\n### post(path, handleFunction)\r\n### put(path, handleFunction)\r\n### del(path, handleFunction)\r\n### options(path, handleFunction)\r\n### trace(path, handleFunction)\r\n\r\nMethod filters built on top of `route`.\r\n\r\nExample:\r\n\r\n```javascript\r\nargo()\r\n  .get('/puppies', function(handle) {\r\n    handle('request', function(env, next) {\r\n      env.response.body = JSON.stringify([{name: 'Sparky', breed: 'Fox Terrier' }]);\r\n      next(env);\r\n    });\r\n  })\r\n```\r\n<a name=\"map\"/>\r\n### map(path, [options], argoSegmentFunction)\r\n\r\n`map` is used to delegate control to sub-Argo instances based on a request URI path.\r\n\r\n* `path`: a string used to match the HTTP Request URI path.\r\n\r\n* `options`: an object with a `methods` property to filter HTTP methods (e.g., `{ methods: ['GET','POST'] }`).  Optional.\r\n\r\n* `argoSegmentFunction`: a function that is passed an instance of `argo` for additional setup.\r\n\r\nExample:\r\n\r\n```javascript\r\nargo()\r\n  .map('/payments', function(server) {\r\n    server\r\n      .use(oauth)\r\n      .target('http://backend_payment_server');\r\n  })\r\n```\r\n<a name=\"include\"/>\r\n### include(package)\r\n\r\n* `package`: An object that contains a `package` property.\r\n\r\nThe `package` property is a function that takes an argo instance as a paramter and returns an object that contains a `name` and an `install` function.\r\n\r\nExample:\r\n\r\n```javascript\r\nvar superPackage = function(argo) {\r\n  return {\r\n    name: 'Super Package',\r\n    install: function() {\r\n      argo\r\n        .use(oauth)\r\n        .route('/super', require('./super'));\r\n    }\r\n  };\r\n};\r\n\r\nargo()\r\n  .include({ package: superPackage})\r\n```\r\n<a name=\"listen\"/>\r\n### listen(port)\r\n\r\n* `port`: A port on which the server should listen.\r\n\r\n## Tests\r\n\r\nUnit tests: \r\n\r\n```bash\r\n$ npm test\r\n```\r\n\r\nTest Coverage:\r\n\r\n```bash\r\n$ npm run-script coverage\r\n```\r\n\r\n## On the Roadmap\r\n\r\n* HTTP Caching Support\r\n* Collapsed Forwarding\r\n* Parameterized Routing\r\n* Rate Limiting\r\n\r\n## License\r\nMIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}